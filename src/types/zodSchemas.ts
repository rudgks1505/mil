/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./supabase";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const graphqlPublicGraphqlArgsSchema = z.object({
  extensions: jsonSchema.optional(),
  operationName: z.string().optional(),
  query: z.string().optional(),
  variables: jsonSchema.optional(),
});

export const graphqlPublicGraphqlReturnsSchema = jsonSchema;

export const publicBookMarksRowSchema = z.object({
  book_uuid: z.string(),
  created_at: z.string(),
  id: z.number(),
  user_id: z.string(),
});

export const publicBookMarksInsertSchema = z.object({
  book_uuid: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  user_id: z.string(),
});

export const publicBookMarksUpdateSchema = z.object({
  book_uuid: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  user_id: z.string().optional(),
});

export const publicBookMarksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("book_marks_book_uuid_fkey"),
    columns: z.tuple([z.literal("book_uuid")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("books"),
    referencedColumns: z.tuple([z.literal("uuid")]),
  }),
  z.object({
    foreignKeyName: z.literal("book_marks_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("member"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const publicBooksRowSchema = z.object({
  author: z.string(),
  book_review: z.string(),
  created_at: z.string(),
  genre: z.string(),
  hit: z.number(),
  id: z.number(),
  img_path: z.string(),
  last_rank: z.number().nullable(),
  owner: z.string(),
  symbol: z.string(),
  title: z.string(),
  today_hit: z.number(),
  today_rank: z.number().nullable(),
  uuid: z.string(),
});

export const publicBooksInsertSchema = z.object({
  author: z.string(),
  book_review: z.string().optional(),
  created_at: z.string().optional(),
  genre: z.string(),
  hit: z.number().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  last_rank: z.number().optional().nullable(),
  owner: z.string().optional(),
  symbol: z.string(),
  title: z.string(),
  today_hit: z.number().optional(),
  today_rank: z.number().optional().nullable(),
  uuid: z.string().optional(),
});

export const publicBooksUpdateSchema = z.object({
  author: z.string().optional(),
  book_review: z.string().optional(),
  created_at: z.string().optional(),
  genre: z.string().optional(),
  hit: z.number().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  last_rank: z.number().optional().nullable(),
  owner: z.string().optional(),
  symbol: z.string().optional(),
  title: z.string().optional(),
  today_hit: z.number().optional(),
  today_rank: z.number().optional().nullable(),
  uuid: z.string().optional(),
});

export const publicChaptersRowSchema = z.object({
  book_id: z.number(),
  created_at: z.string(),
  id: z.number(),
  img_path: z.string(),
  owner: z.string(),
  seq: z.number(),
  title: z.string(),
  xhtml: z.string(),
});

export const publicChaptersInsertSchema = z.object({
  book_id: z.number(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  owner: z.string().optional(),
  seq: z.number(),
  title: z.string(),
  xhtml: z.string(),
});

export const publicChaptersUpdateSchema = z.object({
  book_id: z.number().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  owner: z.string().optional(),
  seq: z.number().optional(),
  title: z.string().optional(),
  xhtml: z.string().optional(),
});

export const publicChaptersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("Chapters_book_id_fkey"),
    columns: z.tuple([z.literal("book_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("books"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicHistoryRowSchema = z.object({
  book_uuid: z.string(),
  id: z.number(),
  user_id: z.string(),
  visited_at: z.string(),
});

export const publicHistoryInsertSchema = z.object({
  book_uuid: z.string(),
  id: z.number().optional(),
  user_id: z.string(),
  visited_at: z.string().optional(),
});

export const publicHistoryUpdateSchema = z.object({
  book_uuid: z.string().optional(),
  id: z.number().optional(),
  user_id: z.string().optional(),
  visited_at: z.string().optional(),
});

export const publicHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("history_book_uuid_fkey"),
    columns: z.tuple([z.literal("book_uuid")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("books"),
    referencedColumns: z.tuple([z.literal("uuid")]),
  }),
  z.object({
    foreignKeyName: z.literal("history_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("member"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const publicMainvisualRowSchema = z.object({
  agree: z.boolean(),
  book_link: z.string().nullable(),
  created_at: z.string(),
  id: z.number(),
  img_path: z.string(),
  img_path_m: z.string(),
  owner: z.string(),
  slide_order: z.number(),
  sub_title: z.string().nullable(),
  title: z.string(),
});

export const publicMainvisualInsertSchema = z.object({
  agree: z.boolean().optional(),
  book_link: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  img_path_m: z.string().optional(),
  owner: z.string().optional(),
  slide_order: z.number().optional(),
  sub_title: z.string().optional().nullable(),
  title: z.string(),
});

export const publicMainvisualUpdateSchema = z.object({
  agree: z.boolean().optional(),
  book_link: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  img_path: z.string().optional(),
  img_path_m: z.string().optional(),
  owner: z.string().optional(),
  slide_order: z.number().optional(),
  sub_title: z.string().optional().nullable(),
  title: z.string().optional(),
});

export const publicMemberRowSchema = z.object({
  created_at: z.string(),
  email: z.string().nullable(),
  id: z.number(),
  last_sign: z.string().nullable(),
  user_id: z.string().nullable(),
  user_phone: z.string().nullable(),
  user_role: z.string().nullable(),
  uuid: z.string().nullable(),
  uuid_close: z.string().nullable(),
});

export const publicMemberInsertSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  id: z.number().optional(),
  last_sign: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  user_phone: z.string().optional().nullable(),
  user_role: z.string().optional().nullable(),
  uuid: z.string().optional().nullable(),
  uuid_close: z.string().optional().nullable(),
});

export const publicMemberUpdateSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  id: z.number().optional(),
  last_sign: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  user_phone: z.string().optional().nullable(),
  user_role: z.string().optional().nullable(),
  uuid: z.string().optional().nullable(),
  uuid_close: z.string().optional().nullable(),
});

export const publicUserBooksRowSchema = z.object({
  background_color: z.string(),
  book_uuid: z.string(),
  cfi: z.string(),
  font_color: z.string(),
  font_height: z.string(),
  font_size: z.string(),
  font_weight: z.string(),
  id: z.number(),
  spread: z.string(),
  user_id: z.string(),
});

export const publicUserBooksInsertSchema = z.object({
  background_color: z.string(),
  book_uuid: z.string(),
  cfi: z.string(),
  font_color: z.string(),
  font_height: z.string(),
  font_size: z.string(),
  font_weight: z.string(),
  id: z.number().optional(),
  spread: z.string(),
  user_id: z.string(),
});

export const publicUserBooksUpdateSchema = z.object({
  background_color: z.string().optional(),
  book_uuid: z.string().optional(),
  cfi: z.string().optional(),
  font_color: z.string().optional(),
  font_height: z.string().optional(),
  font_size: z.string().optional(),
  font_weight: z.string().optional(),
  id: z.number().optional(),
  spread: z.string().optional(),
  user_id: z.string().optional(),
});

export const publicUserBooksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_books_book_uuid_fkey"),
    columns: z.tuple([z.literal("book_uuid")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("books"),
    referencedColumns: z.tuple([z.literal("uuid")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_books_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("member"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const publicIncrementBookHitArgsSchema = z.object({
  book_uuid: z.string(),
});

export const publicIncrementBookHitReturnsSchema = z.number();

export const publicScheduleJobArgsSchema = z.object({
  command: z.string(),
  job_name: z.string(),
  schedule: z.string(),
});

export const publicScheduleJobReturnsSchema = z.number();

export const publicUnscheduleJobArgsSchema = z.object({
  job_name: z.string(),
});

export const publicUnscheduleJobReturnsSchema = z.boolean();
